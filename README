README
--------
Hello!

This is a pretty barebones setup. All that is necessary to view my project is to unzip the folder, and then open the html file index.html, which will automatically load the corresponding JS and CSS (index.js and main.css). 

I used jasmine to do my tests, and also included a specrunner.html file in the spec directory. PLEASE use specrunner.html to execute the tests, since running npm test will fail due to the node environment not having access to browser elements like dom or window. This could be remedied by adding a library like JSDOM to create a virtual DOM for use in Node, but I thought the browser environment sufficent. 

Please note that currently this build works on Firefox and Chrome but not IE Edge. The promise chain is catching an unspecified error. I would tackle it but I've already strayed past my self imposed deadline. 

As for Safari, I wasn't able to test on it. I did this assignment using a nasty old PC, for which Safari isn't available. I hope nothing crashes on Safari but I've learned not to hope when it comes to Safari so apologies in advance if something happens. 

For the issue of securely passing in the API Key, despite the obvious security flaw, I hardcoded the key into my source code. I understand that this is wrong. Ideally this sort of thing is handled server side but on the client, its not possible to come up with a fool proof solution. To better improve upon it, you could load the sensitive data in externally (don't forget a gitignore so you don't push into the repo) in a seperate file (something like an external script or env.json). However, in the end, I simply followed the documentaion provided for the Bitly SDK, and literally just copied what they did. I hope this is acceptable.

Some notes about testing...

///////////////////////////////////////////////////////

In regards to the test structure, I couldn't use modules successfully. ES6 import/export feature has a CORS issue (apparent on chrome) when the source of the script is your local machine. Module.exports isn't recognized by the browser. I tried a bundler like webpack but had difficulty setting it up and executing. I'm sure I would have been able to get it running but due to limited time I just decided to push forward as best as I could. 

I simply pasted my code from my JS source into an external script called spechelper.js. Its the same exact logic so even though its ungainly, the purpose is achieved. I understand this is not best practice and will result in tests that aren't exactly friendly to change, since any new code or changes will have to be manually input, but since this is a one time thing I'm hoping we can bear it. 
 
////////////////////////////////////////////////////////

Thoughts for improvement...

The tests need to be more reflective of user conditions - better mocking via spies would be helpful and lead towards a better "black box" environment and help isolate our logic. They also need to be more thorough in testing individual logic. 

I trusted your SDK to provide the correct data, but in a production environment there should be screens in place to ensure that the appropriate data is indeed populating.  

When it came to validating a user input, I decided to forego coming up with my own logic (though if I had to, I would resort to using a regular expression pattern search to check the input value) and instead rely on the SDK shorten method. I figured that I would let the SDK do the heavy lifting, since it seemed that it wouldn't shorten a faulty link. It seems though, that its necessary to put http:// to make it work - not very user friendly. An easy way to improve that is to append that to an input's value if it didn't already have it, then submit. 

When it comes to error handling, the catch method will catch ANY error on the promise chain, so its not limited to user input and very broad in that sense. For simplicity's sake I opted to use a regular, unstyled generic alert, which would be generated in the case of an error. The error message is very generic and could be better improved by analyzing the resulting error messeage generated by the promise and trying to parse meaning from that. 

The input only takes one link at a time. You can't append multiple links at once. 

I'm sure there are more but I think this readme is getting too long for comfort so I'd like to end by thanking you for the fun exercise and for the opportunity to interview! 